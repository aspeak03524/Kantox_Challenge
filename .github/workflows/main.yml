name: CI/CD Pipeline

on:
  workflow_dispatch:

jobs:
  testing:
    name: Stage1Testing
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Run Docker Compose
        run: |
          docker-compose -f ./docker-compose.yml up -d
        
      - name: Install curl
        run: sudo apt-get install -y curl

      - name: Check if all containers are running
        run: |
          # List all running containers to check their status
          docker ps --filter "status=running"

      - name: Build and push App Image
        uses: docker/build-push-action@v6.15.0
        with:
          context: ./app
          file: ./app/Dockerfile
          push: true
          tags: aspeak03524/kantox-challenge:my-api-dual-2

      - name: Build and push Auxiliary Image
        uses: docker/build-push-action@v6.15.0
        with:
          context: ./auxiliary
          file: ./auxiliary/Dockerfile
          push: true
          tags: aspeak03524/kantox-challenge:my-aux-latest-2

  name: Kubernetes Deployment Update on Docker Hub Push

on:
  repository_dispatch:
    types: [docker_image_push]

jobs:
  deploy:
    runs-on: self-hosted # Or a Kubernetes-enabled runner
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Debug Docker Hub Payload
        run: |
          echo "Docker Hub Payload:"
          echo "${{ toJson(github.event.client_payload) }}"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-south-2

      - name: Update Deployment with Latest Image
        run: |
          aws eks update-kubeconfig --name andrew-kantox-cluster --region eu-south-2

          # Extract image tag from Docker Hub payload
          APP_IMAGE_TAG="${{ github.event.client_payload.push_data.tag }}"
          AUXILIARY_IMAGE_TAG="${{ github.event.client_payload.push_data.tag }}"

          # Update deployment YAML with new image tag
          sed -i "s|aspeak03524/kantox-challenge:my-api-dual:.*|aspeak03524/kantox-challenge:my-api-dual:${APP_IMAGE_TAG}|g" kubernetes/deployment.yml
          sed -i "s|aspeak03524/kantox-challenge:my-aux-latest:.*|aspeak03524/kantox-challenge:my-aux-latest:${AUXILIARY_IMAGE_TAG}|g" kubernetes/deployment.yml

          # Apply updated deployment
          kubectl apply -f kubernetes/deployment.yml -n default

          # Update ConfigMap with image tags
          kubectl create configmap service-version \
          --from-literal=APP_VERSION=${APP_IMAGE_TAG} \
          --from-literal=AUXILIARY_VERSION=${AUXILIARY_IMAGE_TAG} \
          -n default --dry-run=client -o yaml | kubectl apply -f -

      - name: Verify Deployment
        run: |
          kubectl rollout status deployment/your-deployment-name -n default --timeout=60s
        #replace your-deployment-name with the actual name of your deployment.
